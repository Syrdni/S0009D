#version 430
in vec2 TexCoord;
in vec3 Normal;
in vec3 Pos;

in vec4 LightPosition;
in vec4 LightColor;
in vec4 CameraPosition;

out vec4 FragColor;

uniform sampler2D ourTexture;

void main()
{
	//Ambient light
	vec3 ambientLight = vec3(0.01f, 0.01f, 0.01f);

	//Diffuse light
	vec3 posToLightDirVec = normalize(vec3(LightPosition) - Pos);					
	vec3 diffuseColor = vec3(LightColor);											
	float diffuse = clamp(dot(posToLightDirVec, Normal), 0, 1);
	vec3 diffuseFinal = diffuseColor * diffuse;
	
	//Specular light
	vec3 lightToPosDirVec = normalize(vec3(LightPosition) - Pos);					
	vec3 reflectDirVec = normalize(reflect(lightToPosDirVec, normalize(Normal)));
	vec3 posToViewDirVec = normalize(Pos - vec3(CameraPosition));
	vec3 specularFinal;
	if(dot(Normal, lightToPosDirVec) < 0.0)
	{
		specularFinal = vec3(0.0, 0.0, 0.0);
	}
	else
	{
		float specularConstant = pow(max(dot(posToViewDirVec, reflectDirVec), 0), 30);
		specularFinal = vec3(1.f, 1.f, 1.f) * specularConstant;		
	}							

	//Final light
 	FragColor = texture(ourTexture, TexCoord);
	// * (vec4(ambientLight, 1.f) + vec4(diffuseFinal, 1.0f) + vec4(specularFinal, 1.0f));
}